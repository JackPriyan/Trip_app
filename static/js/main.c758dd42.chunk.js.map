{"version":3,"sources":["actions/action.js","constants/ActionTypes.js","Components/Dialog/dialog.js","Components/DetailsForm/form.js","Components/FilterMenu/filter.js","Components/Dialog/snoozeDialog.js","Components/TripList/grid_list.js","Components/App/App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["SaveTrip","tripList","tripListWithReminder","type","AlertDialog","isOpen","onClose","minDate","isSnooze","snoozeItem","React","useState","selectDateTime","setDateTime","items","selectSnooze","setSnooze","isSnoozeModel","console","log","handleClose","name","reminderDate","Date","getTime","handleChange","event","value","target","Dialog","open","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","style","margin","color","TextField","label","defaultValue","variant","InputLabelProps","shrink","InputProps","inputProps","min","onChange","width","Grid","container","spacing","item","xs","FormLabel","title","destination","category","startDate","endDate","FormControl","textAlign","alignContent","Select","MenuItem","DialogActions","Button","onClick","disabled","autoFocus","createMuiTheme","palette","primary","green","form","props","state","date","todayDate","moment","format","todayDateTime","initialState","todos","isEdit","isSaveEnabled","newTodo","isReminderSet","reminderTime","selectedTripId","isReminderClicked","this","nextProps","setState","clock","setInterval","setCurrentTime","classes","validate","newState","trim","itemIndex","length","text","isDone","filter","index","checkTodo","updateTodo","onTripSaveCancel","itemsDelete","JSON","parse","window","localStorage","getItem","newListDelete","tripReminderList","dateTime","onTripDelete","setItem","stringify","undefined","isEmptyArray","initialItems","newList","itemId","push","duration","diff","asDays","onTripSave","className","root","noValidate","autoComplete","formControl","display","formStyle","placeholder","map","key","Checkbox","checked","paddingTop","size","button","startIcon","selectedDate","Divider","Component","connect","filterSelected","selectedTrip","find","dispatch","reminderList","tripId","searchText","categorySelected","search","onSearchChange","onAddNewTripClick","onMenuChange","Paper","height","padding","marginTop","paddingLeft","paddingRight","Box","my","MenuList","selected","selectedCategory","isNewTrip","SnaoozeItem","grid_list","currentTime","itemSelected","isModalOpen","checkReminderClock","onTripSelected","findIndex","i","snoozeSeconds","nextReminderTime","nextReminderDateTime","newListGoto","tripListWithReminderGoto","reminderDateTime","checkDoneStatus","doneList","todo","itemStatus","itemType","TableContainer","component","Table","aria-label","tableLayout","TableHead","backgroundColor","TableRow","scope","header","TableCell","align","TableBody","getFilteredList","Data","includes","filteredItem","t","TripSelected","useStyles","makeStyles","theme","flexGrow","paper","secondary","App","Boolean","location","hostname","match","addedIds","Trips","action","middleware","thunk","store","createStore","rootReducer","applyMiddleware","getTripList","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c758dd42.chunk.js","sourcesContent":["import {\r\n    FILTERCATEGORY,\r\n    SELECTEDTRIP,\r\n    SEARCHTEXT,\r\n    ADDNEWTRIP,\r\n    TRIPDB,\r\n    TRIPLIST,\r\n    SAVETRIP,\r\n    DELETETRIP,\r\n    SAVETRIPCANCEL\r\n  } from '../constants/ActionTypes'\r\n\r\n/**\r\n  * The action for filtering the Trip list based on category\r\n  * @param {*} category \r\n*/\r\nexport const FilterOption = category => ({ type: FILTERCATEGORY, category});\r\n\r\n/**\r\n * The Action to Select a particular trip from the list and show it on the details screen\r\n * @param {*} selectedTrip \r\n * @param {*} id \r\n */\r\nexport const TripSelected = (selectedTrip, id) => ({ type: SELECTEDTRIP, selectedTrip,id});\r\n\r\n/**\r\n * The Action for the search option in the filter panel\r\n */\r\nexport const SearchText = text => ({ type: SEARCHTEXT, text});\r\n\r\n/**\r\n * \r\n * @param {*} isNewTrip \r\n */\r\nexport const AddNewTrip = isNewTrip => ({ type: ADDNEWTRIP, isNewTrip});\r\n\r\nexport const SaveTrip = (tripList,tripListWithReminder) => ({ type: SAVETRIP, tripList,tripListWithReminder});\r\n\r\nexport const SaveRemiderTrips = tripList => ({ type: SAVETRIP, tripList});\r\n\r\nexport const DeleteTrip = (tripId,tripList, tripListWithReminder) => ({ type: DELETETRIP, tripId, tripList, tripListWithReminder});\r\n\r\nexport const SaveTripCancel = () => ({ type: SAVETRIPCANCEL});\r\n\r\n\r\nconst getTripList = (tripList,tripListWithReminder) => ({\r\n    type: TRIPLIST,\r\n    tripList,\r\n    tripListWithReminder\r\n  })\r\n\r\n\r\nexport const getAllTrips = () => dispatch => {\r\n    var items = [];\r\n    items = JSON.parse(window.localStorage.getItem(TRIPDB));\r\n    console.log(\"get List items => \",items)\r\n    const tripList = items?items:[];\r\n    const tripListWithReminder = tripList.filter((item) => {\r\n      if(item.isReminderSet)\r\n        return {id: item.id, dateTime : item.reminderTime }\r\n    });\r\n    dispatch(getTripList(tripList, tripListWithReminder));\r\n  }\r\n\r\n","export const FILTERCATEGORY = 'FILTERCATEGORY'\r\nexport const SELECTEDTRIP = 'SELECTEDTRIP'\r\nexport const SEARCHTEXT = 'SEARCHTEXT'\r\nexport const ADDNEWTRIP = 'ADDNEWTRIP'\r\n\r\nexport const TRIPLIST = \"TRIPLIST\"\r\n\r\nexport const TRIPDB = \"TripList\"\r\n\r\nexport const SAVETRIP = \"SAVETRIP\"\r\n\r\nexport const DELETETRIP = \"DELETETRIP\"\r\n\r\nexport const SAVETRIPCANCEL = \"SAVETRIPCANCEL\"\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { FormLabel } from '@material-ui/core';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\r\n\r\nexport default function AlertDialog({isOpen, onClose, minDate, isSnooze = false, snoozeItem }) {\r\n  const [selectDateTime, setDateTime] = React.useState(minDate);\r\n  const [items] = React.useState(snoozeItem);\r\n  const [selectSnooze, setSnooze] = React.useState(0);\r\n  const [isSnoozeModel] = React.useState(isSnooze);\r\n\r\n  console.log(\"AlertDialog 11=> \", snoozeItem);\r\n\r\n  const itemStatus = [\"Created\", \"In Progress\", \"Ready\"]\r\n  const itemType = [\"\",\"Business\", \"Vacation\"]\r\n  \r\n  const handleClose = (name) => {\r\n    \r\n    //Logic for Snooze\r\n    if(isSnoozeModel){\r\n        if(selectSnooze>0)\r\n            onClose(selectSnooze);\r\n    }\r\n    //Logic for normal close\r\n    if(name === \"close\")\r\n        onClose(selectDateTime);\r\n\r\n    //Save DateTime in details form if its future date selected\r\n    else  if(! isSnoozeModel){\r\n        const reminderDate = new Date(selectDateTime).getTime();\r\n        const currentTime = new Date().getTime();\r\n        const difference = currentTime/1000 - reminderDate/1000;\r\n        if(difference<0 )\r\n            onClose(selectDateTime);\r\n    }\r\n  };\r\n  const handleChange = (name, event, itemIndex = 0) => {\r\n    const value  = event.target.value;\r\n    switch (name){\r\n        case \"setReminder\":\r\n            setDateTime (value);\r\n            break;\r\n        case \"snooze\":\r\n            setSnooze (value);\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={isOpen}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        \r\n        {isSnoozeModel === false &&\r\n        <div>\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Please set the Date Time below\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            <div style={{margin:'10px', color:'red'}}>{ \"Please Set Future Date & Time.\"}</div>\r\n          <TextField\r\n                        id=\"datetime-local\"\r\n                        label=\"Set Reminder\"\r\n                        type=\"datetime-local\"\r\n                        defaultValue={minDate}\r\n                        value={selectDateTime}\r\n                        variant=\"outlined\" \r\n                        InputLabelProps={{\r\n                        shrink: true\r\n                        }}\r\n                        InputProps={{inputProps: { min: minDate} }}\r\n                        onChange={(event) => handleChange(\"setReminder\", event)}\r\n                    />\r\n          </DialogContentText>\r\n        \r\n        </DialogContent>\r\n        </div>\r\n        }\r\n\r\n        {isSnoozeModel === true && items &&\r\n        <div>\r\n        <DialogTitle id=\"alert-dialog-title\"> <NotificationsActiveIcon/>{\" Reminder \"}</DialogTitle>\r\n        <DialogContent  style={{width:'20rem'}}>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Title</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.title}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Destination</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.destination}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Category</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {itemType[items.category]}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Start Date</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.startDate}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >End Date</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.endDate}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Status</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {itemStatus[items.category]}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > Snooze</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormControl variant=\"outlined\" style={{width: '100%', textAlign:'left', alignContent:'left'}}>\r\n                            <Select id=\"demo-simple-select-outlined\"\r\n                                    value={selectSnooze}\r\n                                    onChange={(event) => handleChange(\"snooze\", event)}\r\n                                    margin=\"dense\">\r\n                            <MenuItem value={0}>\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value={1}>5 Mins</MenuItem>\r\n                            <MenuItem value={2}>10 Mins</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n          </DialogContentText>\r\n        \r\n        </DialogContent>\r\n        </div>\r\n        }\r\n        <DialogActions>\r\n          <Button onClick={()=>handleClose(\"save\")} disabled={isSnooze && selectSnooze === 0} color=\"primary\">\r\n            Save\r\n          </Button>\r\n          <Button onClick={()=>handleClose(\"close\")} color=\"secondary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, {Component} from 'react';\r\nimport { createMuiTheme  } from '@material-ui/core/styles';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { FormLabel, Divider } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport { green } from '@material-ui/core/colors';\r\nimport AddAlertIcon from '@material-ui/icons/AddAlert';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport moment from 'moment'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { connect } from 'react-redux'\r\nimport {SaveTrip, DeleteTrip,SaveTripCancel} from '../../actions/action'\r\nimport AlertDialog from '../../Components/Dialog/dialog'\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n      primary: green,\r\n    },\r\n  });\r\n\r\nconst styles = theme => ({\r\n    palette: {\r\n        primary: green,\r\n      },\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n\r\n    formControl: {\r\n        display: 'inline-block'\r\n    },\r\n    formStyle: {\r\n        marginTop : '1 rem'\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n      },\r\n  });\r\n\r\n\r\n\r\nclass form extends Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        this.state = {};\r\n        console.log(\"form props => \",props);\r\n        const date = new Date();\r\n        const todayDate = moment(date).format(\"yyyy-MM-DD\");\r\n        const todayDateTime = moment().format(\"YYYY-MM-DD[T]HH:mm\");\r\n        const startDate = moment(date).format(\"yyyy-MM-DD\");   \r\n        const endDate = startDate;   \r\n        const item = props.item;\r\n        const initialState = {todayDate : todayDate,\r\n                                todayDateTime: todayDateTime, \r\n                                startDate: startDate,\r\n                                endDate : endDate,\r\n                                category: 0,\r\n                                todos:[],\r\n                                isEdit : false,\r\n                                isSaveEnabled: false,\r\n                                title: '',\r\n                                destination: '',\r\n                                newTodo: '',\r\n                                isReminderSet:false,\r\n                                reminderTime:todayDateTime,\r\n                                selectedTripId: null,\r\n                                id:null,\r\n                                isReminderClicked:false};\r\n        this.state = {...initialState, initialState : initialState, item:props.item};\r\n        //window.localStorage.clear();\r\n\r\n    }\r\n    componentDidMount() {\r\n        console.log('State after Mount',this.state);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // This will erase any local state updates!\r\n        // Do not do this.\r\n        console.log(\"propChanging\", nextProps);\r\n        if(nextProps.selectedTripId == null || nextProps.selectedTripId == -1)\r\n        {\r\n            this.setState({\r\n                ...this.state.initialState\r\n            });\r\n        }\r\n        if(nextProps.item){\r\n            const item = nextProps.item;\r\n            this.setState({...this.state, \r\n                startDate: item.startDate,\r\n                endDate : item.endDate,\r\n                category: item.category,\r\n                todos:item.todos,\r\n                isEdit : true,\r\n                isSaveEnabled: true,\r\n                title: item.title,\r\n                destination: item.destination,\r\n                isReminderSet:item.isReminderSet,\r\n                reminderTime:item.reminderTime,\r\n                id: item.id,\r\n                isReminderClicked: false});\r\n        }\r\n      }\r\n\r\n      componentDidMount(){\r\n        this.clock = setInterval(\r\n          () => this.setCurrentTime(),\r\n          1000\r\n        )\r\n      }\r\n\r\n      setCurrentTime(){\r\n        const todayDateTime = moment().format(\"YYYY-MM-DD[T]HH:mm\");\r\n        if(this.state.isReminderClicked)\r\n        this.setState({\r\n            todayDateTime: todayDateTime\r\n        });\r\n        console.log(this.state.todayDateTime);\r\n      }\r\n      \r\n    // static getDerivedStateFromProps(props, current_state) {\r\n    //     if (current_state.value !== props.value) {\r\n    //       return {\r\n    //         value: props.value,\r\n    //         computed_prop: heavy_computation(props.value)\r\n    //       }\r\n    //     }\r\n    //     return null\r\n    // }\r\n\r\n\r\n   \r\n\r\n    render(){\r\n        const classes = this.props;\r\n        const theme = this.props;\r\n\r\n        const validate = (newState) => {\r\n            if((newState.title && newState.title.trim()) && \r\n                (newState.destination && newState.destination.trim()) &&\r\n                newState.category !== 0 &&\r\n                newState.startDate && newState.endDate){\r\n                    this.setState({...newState, isSaveEnabled: true});\r\n                    console.log(\"newState => \", newState);\r\n                }\r\n            else{\r\n                console.log(\"newState => \", newState);\r\n                this.setState({...newState, isSaveEnabled: false}); \r\n            }\r\n        }\r\n        \r\n\r\n        const handleChange = (name, event, itemIndex = 0) => {\r\n            const value = event ? event.target ? event.target.value : 0: 0 ; \r\n            var newState;\r\n            switch(name){\r\n                case \"setReminder\":\r\n                    newState = {\r\n                        ...this.state, isReminderSet : !this.state.isReminderSet};\r\n                    break;\r\n                case \"openReminder\":\r\n                    console.log(\"openReminder => \",event);\r\n                    newState = {\r\n                        ...this.state, reminderTime: event , isReminderClicked: !this.state.isReminderClicked, isReminderSet : true};\r\n                    break;\r\n                case \"title\":\r\n                    newState = {\r\n                        ...this.state, title: value};\r\n                    break;\r\n                case \"destination\":\r\n                    newState = {\r\n                        ...this.state, destination: value};\r\n                    break;\r\n                case \"startDate\":\r\n                    newState = {\r\n                        ...this.state, startDate: value, endDate : value\r\n                    };\r\n                    break;\r\n                case \"endDate\":\r\n                    newState = {\r\n                        ...this.state, endDate : value\r\n                    };\r\n                    break;\r\n                case \"category\":\r\n                    newState = {\r\n                        ...this.state, category : value\r\n                    };\r\n                    break;\r\n                case \"addTodo\":\r\n                    if(this.state.newTodo.trim()){\r\n                        //Sets the todo id by incrementing the id of last todo item if todo is not empty else id = 0\r\n                        newState = {\r\n                            ...this.state, newTodo:'' , todos:[...this.state.todos,{id: this.state.todos.length? this.state.todos[this.state.todos.length-1].id+1: 0,text:this.state.newTodo, isDone: false}]\r\n                        };\r\n\r\n                    console.log('State after addTodo change',this.state);\r\n                    }\r\n                    break;\r\n                case \"deleteTodo\":\r\n                    //Removing the selected todo from todo array by id\r\n                    const newTodo = this.state.todos.filter( (item, index)=>{if(item.id != itemIndex){ console.log(\"item.id =>\",item.id);  return item;} });\r\n                    newState = {\r\n                        ...this.state, todos:newTodo\r\n                    };\r\n                    break;\r\n                case \"checkToDo\":\r\n                    const checkTodo = this.state.todos.filter( (item, index)=>{if(item.id == itemIndex){ console.log(\"item.id =>\",item.id); item.isDone = !item.isDone; } return item; });\r\n                    newState = {\r\n                        ...this.state, todos:checkTodo\r\n                    };\r\n                    break;\r\n                case \"updateToDoText\":\r\n                    const updateTodo = this.state.todos.filter( (item, index)=>{if(item.id == itemIndex){ console.log(\"item.id =>\",item.id); item.text = value; } return item; });\r\n                    newState = {\r\n                        ...this.state, todos:updateTodo\r\n                    };\r\n                        break;\r\n                case \"newTodo\":\r\n                    newState = {\r\n                        ...this.state, newTodo:value\r\n                    };\r\n                    break;\r\n                case \"cancel\":\r\n                    console.log(\"cancel\", this.state.initialState);\r\n                    this.setState({\r\n                        ...this.state.initialState\r\n                    });\r\n                    this.props.onTripSaveCancel();\r\n                    return;\r\n                case \"delete\":\r\n                    var itemsDelete = [];\r\n                    console.log(\"cancel\", this.state.initialState);\r\n                    itemsDelete = JSON.parse(window.localStorage.getItem(\"TripList\"));\r\n                    console.log(\"itemsDelete => \", itemsDelete);\r\n                    const newListDelete = itemsDelete && itemsDelete.length > 0? itemsDelete.filter((item)=>{ if(item.id !== this.state.id) return item }):[];\r\n                    const tripReminderList = newListDelete.filter((item) => {\r\n                        if(item.isReminderSet)\r\n                          return {id: item.id, dateTime : item.reminderTime }\r\n                      });\r\n                    \r\n                    this.props.onTripDelete(this.state.id, newListDelete, tripReminderList);\r\n\r\n                    this.setState({\r\n                        ...this.state.initialState\r\n                    });\r\n                    console.log(\"newList => \", newListDelete);\r\n                    window.localStorage.setItem(\"TripList\", JSON.stringify(newListDelete));\r\n                    return;\r\n                 case \"save\":\r\n                    var items = [];\r\n                    items = JSON.parse(window.localStorage.getItem(\"TripList\"));\r\n                    console.log(\"items => \", items);\r\n                    const isEdit = this.state.id != null && this.state.id != undefined ? this.state.id >= 0 ? true : false :false;\r\n                    const isEmptyArray = !items || items.length < 1;\r\n                    const initialItems = isEdit ? items.filter((item)=>{ if(item.id !== this.state.id) return item }) : items;\r\n                    const newList =  ! isEmptyArray?initialItems:[];\r\n                    const itemId = newList.length > 0 ? newList[newList.length-1].id+1 : 0;\r\n                    newList.push({\r\n                        id: isEdit ? this.state.id : itemId,\r\n                        title : this.state.title,\r\n                        destination: this.state.destination,\r\n                        category: this.state.category,\r\n                        startDate: this.state.startDate,\r\n                        endDate: this.state.endDate,\r\n                        todos: this.state.todos,\r\n                        isReminderSet: this.state.isReminderSet,\r\n                        reminderTime: this.state.reminderTime,\r\n                        state: 0,\r\n                        duration: (moment.duration(moment(this.state.endDate, \"YYYY-MM-DD\").diff(this.state.startDate, \"YYYY-MM-DD\")).asDays())\r\n                        \r\n                    });\r\n                    console.log(\"newList => \", newList);\r\n                    window.localStorage.setItem(\"TripList\", JSON.stringify(newList));\r\n                    this.setState({\r\n                        ...this.state.initialState\r\n                    });\r\n                    const tripListWithReminder = newList.filter((item) => {\r\n                        if(item.isReminderSet)\r\n                          return {id: item.id, dateTime : item.reminderTime }\r\n                      });\r\n                    this.props.onTripSave(newList, tripListWithReminder);\r\n                    return;\r\n                default:\r\n                    return;\r\n            }\r\n            if(newState)\r\n            validate(newState);\r\n        };\r\n\r\n        return(\r\n            <div>\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                    <FormControl className={classes.formControl} style={{display: 'inline-block'}}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                            <FormLabel >Title</FormLabel>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={8}>\r\n                            <TextField  id=\"title-text\" \r\n                                        className={classes.formStyle} \r\n                                        placeholder=\"Title\" \r\n                                        variant=\"outlined\" \r\n                                        value={this.state.title||''}\r\n                                        onChange={(event) => handleChange(\"title\", event)}\r\n                                        style={{width:'100%'}}\r\n                                        margin=\"dense\"/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                            <FormLabel >Destination</FormLabel>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <TextField id=\"destination-text\" \r\n                                        className={classes.formStyle}  \r\n                                        placeholder=\"Destination\" \r\n                                        variant=\"outlined\" \r\n                                        value={this.state.destination || ''}\r\n                                        onChange={(event) => handleChange(\"destination\", event)}\r\n                                        style={{width:'100%'}}\r\n                                        margin=\"dense\"/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                            <FormLabel >Category</FormLabel>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                        <FormControl variant=\"outlined\" style={{width: '100%', textAlign:'left', alignContent:'left'}}>\r\n                            <Select id=\"demo-simple-select-outlined\"\r\n                                    value={this.state.category}\r\n                                    onChange={(event) => handleChange(\"category\", event)}\r\n                                    margin=\"dense\">\r\n                            <MenuItem value={0}>\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value={1}>Business</MenuItem>\r\n                            <MenuItem value={2}>Vacation</MenuItem>\r\n                            </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                        <FormLabel >Start Date</FormLabel>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <TextField  style={{width: '100%'}}\r\n                                        id=\"startDate-text\" \r\n                                        className={classes.formStyle}  \r\n                                        variant=\"outlined\" \r\n                                        type=\"date\"\r\n                                        value={this.state.startDate}\r\n                                        InputProps={{inputProps: { min: this.state.todayDate} }}\r\n                                        onChange={(event) => handleChange(\"startDate\", event)}\r\n                                        margin=\"dense\"/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                            <FormLabel >End Date</FormLabel>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <TextField id=\"endDate-text\" \r\n                                        style={{width: '100%'}}\r\n                                        className={classes.formStyle}  \r\n                                        placeholder=\"End Date\" \r\n                                        variant=\"outlined\" \r\n                                        type=\"date\"\r\n                                        value={this.state.endDate}\r\n                                        InputProps={{inputProps: { min: this.state.startDate} }}\r\n                                        onChange={(event) => handleChange(\"endDate\", event)}\r\n                                        margin=\"dense\"/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={4}>\r\n                            <FormLabel >ToDo</FormLabel>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                        </Grid>\r\n                    </Grid>\r\n                    {\r\n                        this.state.todos.map((item, index)=>\r\n                        \r\n                    <Grid container spacing={3} \r\n                          key={index}>\r\n                        <Grid item xs={1}>\r\n                            <Checkbox name={\"Check\"+index} color=\"primary\"\r\n                                        checked={item.isDone}\r\n                                        onChange={(event) => handleChange(\"checkToDo\", event, item.id)}/>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <TextField id={\"todoItem-text\"+index} \r\n                                        className={classes.formStyle}  \r\n                                        placeholder=\"ToDo Item\" \r\n                                        variant=\"outlined\" \r\n                                        value={item.text || ''}\r\n                                        margin=\"dense\"\r\n                                        onChange={(event) => handleChange(\"updateToDoText\", event, item.id)}/>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                        <div style={{ paddingTop:'8px'}}>\r\n                            <Button id={item.id}\r\n                                    style={{width: '100%'}}\r\n                                    size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<DeleteIcon />}\r\n                                    onClick={(event) => handleChange(\"deleteTodo\", event, item.id)}>\r\n                                    Delete \r\n                                </Button>\r\n                            </div>\r\n                        </Grid>\r\n                          \r\n                    </Grid>)\r\n                    }\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={1} style={{width:'2rem'}}>\r\n                            \r\n                        </Grid>\r\n                        <Grid item xs={7}  style={{width:'100%'}}>\r\n                        <TextField id=\"toDoNew-text\" \r\n                                        className={classes.formStyle}  \r\n                                        placeholder=\"ToDo Item\" \r\n                                        variant=\"outlined\" \r\n                                        margin=\"dense\"\r\n                                    onChange={(event) => handleChange(\"newTodo\", event)}\r\n                                    value={this.state.newTodo || ''}/>\r\n                        </Grid>\r\n                        <Grid item xs={4} style={{width:'100%'}}>\r\n                            <div style={{ paddingTop:'8px'}}>\r\n                            <Button style={{ width: '100%'}}\r\n                                    size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    startIcon={<AddIcon />}\r\n                                    onClick={(event) => handleChange(\"addTodo\", event)}\r\n                                    margin=\"dense\">\r\n                                    Add \r\n                                </Button>\r\n                                </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={3}>\r\n                        <AlertDialog isOpen={this.state.isReminderClicked} \r\n                                        onClose={(event) => handleChange(\"openReminder\", event)}\r\n                                        minDate={this.state.reminderTime}\r\n                                        selectedDate={this.state.reminderTime}\r\n                                        isSnooze={false}/>\r\n                        <Checkbox   name={\"Check\"}\r\n                                    checked={this.state.isReminderSet}\r\n                                    onChange={(event) => handleChange(\"setReminder\", event)}></Checkbox>\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                startIcon={<AddAlertIcon />}\r\n                                onClick={(event) => handleChange(\"openReminder\", event)}>\r\n                                Set Reminder\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                              \r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={2}>\r\n                    <Divider style={{margin : '20px'}} variant=\"middle\" />\r\n\r\n                    </Grid>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={4}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                startIcon={<SaveIcon />}\r\n                                onClick={(event) => handleChange(\"save\", event)}\r\n                                disabled={!this.state.isSaveEnabled}>\r\n                                Save\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                className={classes.button}\r\n                                startIcon={<CancelIcon />}\r\n                                onClick={(event) => handleChange(\"cancel\", event)}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={4}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                className={classes.button}\r\n                                startIcon={<DeleteIcon />}\r\n                                onClick={(event) => handleChange(\"delete\", event)}\r\n                                disabled={!this.state.isEdit}>\r\n                                Delete\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                    </FormControl>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nconst getItemDetails = (items,id) => {\r\n    if(id>=0){\r\n        return items.find(item => item.id == id);\r\n    }\r\n    console.log(\"getItemDetails => \",null);\r\n    return null;\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    filterSelected: state.filterSelected,\r\n    selectedTrip: state.selectedTrip,\r\n    items: state.items,\r\n    item: getItemDetails(state.items, state.selectedTripId),\r\n    selectedTripId: state.selectedTripId\r\n  })\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    onTripSave: (newList, reminderList) => dispatch(SaveTrip(newList,reminderList)),\r\n    onTripDelete: (id,newList, reminderList) => dispatch(DeleteTrip(id, newList, reminderList)),\r\n    onTripSaveCancel: () => dispatch(SaveTripCancel())\r\n  })\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(form)\r\n","import React, {Component} from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport Box from '@material-ui/core/Box';\r\nimport {FilterOption, SearchText, AddNewTrip} from '../../actions/action'\r\nimport { connect } from 'react-redux'\r\n\r\n\r\nclass filter extends Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        console.log(\"filter props =>\",props);\r\n        this.state = {};\r\n        const initialState = {searchText : '', \r\n                                categorySelected: 0\r\n                            };\r\n        this.state = {...initialState, initialState : initialState};\r\n    }\r\n\r\n    render(){\r\n        const itemType = [\"All\",\"Business\", \"Vacation\"]\r\n\r\n        const handleChange = (name, event, itemIndex = 0) => {\r\n            const value = event.target.value; \r\n            var newState;\r\n            switch(name){\r\n                case \"searchText\":\r\n                    newState = {\r\n                        ...this.state, searchText: value};\r\n                    break;\r\n                case \"search\":\r\n                    newState = {\r\n                        ...this.state, search: value};\r\n                    this.props.onSearchChange(this.state.searchText);\r\n                    break;\r\n                case \"addTodo\":\r\n                    this.props.onAddNewTripClick();\r\n                    break;\r\n                case \"menuChange\":\r\n                    newState = {\r\n                        ...this.state, categorySelected: itemIndex};\r\n                    this.props.onMenuChange(itemIndex);\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n            this.setState({...newState});\r\n        }\r\n        return(\r\n            <Paper style={{height:'100%', padding: '20px'}}>\r\n                <Grid container spacing={0}>\r\n                    <Grid item xs={8}>\r\n                        <TextField  id=\"search-text\" \r\n                            placeholder=\"Search..\" \r\n                            variant=\"outlined\" \r\n                            value={this.state.searchText ||''}\r\n                            onChange={(event) => handleChange(\"searchText\", event)}\r\n                            style={{width:'100%'}}\r\n                            margin=\"dense\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <div style={{ marginTop:'8px'}}>\r\n                        <Button     size=\"large\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={(event) => handleChange(\"search\", event)}\r\n                                    style={{width:'25px', margin:'auto', paddingLeft:'0px',paddingRight:'0px'}}>\r\n                                        <SearchIcon/>\r\n                         </Button>\r\n                         </div>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container spacing={1}>\r\n                <Box my={2} style={{ width: '100%'}}>\r\n                <Button style={{ width: '100%'}}\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    startIcon={<AddIcon />}\r\n                                    onClick={(event) => handleChange(\"addTodo\", event)}>\r\n                                    Add A Trip\r\n                                </Button>\r\n                </Box>\r\n                </Grid>\r\n                <MenuList>\r\n                {itemType.map((item, index) => \r\n                    <MenuItem key={\"menu\"+index} \r\n                                selected={index === this.state.categorySelected}\r\n                                onClick={(event) => handleChange(\"menuChange\", event, index)}>{item}</MenuItem>)}\r\n                </MenuList>\r\n                \r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    filterSelected: 0 \r\n  })\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    onMenuChange: selectedCategory => dispatch(FilterOption(selectedCategory)),\r\n    onSearchChange: searchText => dispatch(SearchText(searchText)),\r\n    onAddNewTripClick: () => dispatch(AddNewTrip(true))\r\n  })\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(filter)\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { FormLabel } from '@material-ui/core';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\r\n\r\nexport default function AlertDialog({isOpen, onClose, SnaoozeItem }) {\r\n  const items = SnaoozeItem;\r\n  const [selectSnooze, setSnooze] = React.useState(0);\r\n\r\n  console.log(\"AlertDialog 13=> \", items);\r\n\r\n  const itemStatus = [\"Created\", \"In Progress\", \"Ready\"]\r\n  const itemType = [\"\",\"Business\", \"Vacation\"]\r\n \r\n\r\n  const handleClose = (name) => {\r\n    \r\n    //Logic for Snooze\r\n    if(name === \"goto\"){\r\n        onClose(\"gotoDetails\",null);\r\n    }\r\n    else\r\n        onClose(\"snooze\", selectSnooze);\r\n  };\r\n  const handleChange = (name, event, itemIndex = 0) => {\r\n    const value  = event.target.value;\r\n    switch (name){\r\n        case \"snooze\":\r\n            setSnooze (value);\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n    return;\r\n  }\r\n\r\n\r\n  if(items)\r\n  return (\r\n      <Dialog\r\n        open={isOpen}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n            <DialogTitle id=\"alert-dialog-title\"> <NotificationsActiveIcon/>{\" Reminder \"}</DialogTitle>\r\n        <DialogContent  style={{width:'20rem'}}>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Title</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.title}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Destination</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.destination}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Category</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {itemType[items.category]}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Start Date</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.startDate}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >End Date</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {items.endDate}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel >Status</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > {itemStatus[items.category]}</FormLabel>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <FormLabel > Snooze</FormLabel>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <FormControl variant=\"outlined\" style={{width: '100%', textAlign:'left', alignContent:'left'}}>\r\n                            <Select id=\"demo-simple-select-outlined\"\r\n                                    value={selectSnooze}\r\n                                    onChange={(event) => handleChange(\"snooze\", event)}\r\n                                    margin=\"dense\">\r\n                            <MenuItem value={0}>\r\n                                None\r\n                            </MenuItem>\r\n                            <MenuItem value={1}>5 Mins</MenuItem>\r\n                            <MenuItem value={2}>10 Mins</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n          </DialogContentText>\r\n        \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={()=>handleClose(\"save\")} disabled={selectSnooze === 0} color=\"primary\">\r\n            Save\r\n          </Button>\r\n          <Button onClick={()=>handleClose(\"goto\")} color=\"primary\">\r\n            Goto Details\r\n          </Button>\r\n          <Button onClick={()=>handleClose(\"close\")} color=\"secondary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n  );\r\n  else\r\n  return(<div></div>)\r\n}\r\n","import React, {Component} from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {TripSelected} from '../../actions/action'\r\nimport { connect } from 'react-redux'\r\nimport {SaveTrip} from '../../actions/action'\r\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive';\r\nimport NotificationsOffIcon from '@material-ui/icons/NotificationsOff';\r\nimport AlertDialog from '../../Components/Dialog/snoozeDialog'\r\nimport moment from 'moment'\r\n\r\nclass grid_list extends Component {\r\n\r\n    constructor(props){\r\n        super();\r\n        console.log(\"grid_list props =>\",props);\r\n        var items =props.items? props.items: [];\r\n        //items = JSON.parse(window.localStorage.getItem(\"TripList\"));\r\n        console.log(\"get List items => \",items)\r\n        const initialState = {items : items?items:[], currentTime: '',reminderTime: ''}\r\n        this.state = {...initialState, initialState : initialState, itemSelected : props.selectedTrip, items:items, isModalOpen:false, snoozeItem:null};\r\n        console.log(\"get List this.state => \",this.state)\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.selectedTrip === null || nextProps.selectedTrip === -1)\r\n        {\r\n            this.setState({...this.state,itemSelected : nextProps.selectedTrip});\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.clock = setInterval(\r\n          () => this.checkReminderClock(),\r\n          1000\r\n        )\r\n      }\r\n\r\n      checkReminderClock(){\r\n        if(this.state.isModalOpen===false){\r\n            const item  = this.props.tripListWithReminder.find((item) => {\r\n                const reminderDate = new Date(item.reminderTime).getTime();\r\n                const currentTime = new Date().getTime();\r\n                console.log(\"tripListWithReminder => \",currentTime/1000 - reminderDate/1000)\r\n                const difference = currentTime/1000 - reminderDate/1000;\r\n                if(difference>0) {\r\n                return item\r\n                } \r\n            });\r\n            // alert(\"its time!\");\r\n            if(item){\r\n                console.log(\"Snooze Item Again\",item);\r\n                this.setState({...this.state, snoozeItem : item, isModalOpen : true});\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        const headers = [\"\",\"Title\", \"Destination\", \"Duration\", \"Category\", \"Reminder set\", \"Items Needed\", \"Trip Planning State\"];\r\n        \r\n        const handleChange = (name, event, itemIndex = 0) => {\r\n            var newState;\r\n            switch(name){\r\n                \r\n                case \"rowSelected\":\r\n                    newState = {\r\n                        ...this.state, itemSelected: this.state.itemSelected === itemIndex ? -1 : itemIndex };\r\n                    this.props.onTripSelected(this.state.itemSelected === itemIndex ? -1 : itemIndex, this.props.items[itemIndex].id);\r\n                    break;\r\n                case \"openReminder\":\r\n                    console.log(\"openReminder => \",event);\r\n                    newState = {\r\n                        ...this.state, isModalOpen : !this.state.isModalOpen};\r\n                    break;\r\n                case \"gotoDetails\" :\r\n                        console.log(\"gotoDetails => \");\r\n                        newState = {\r\n                            ...this.state, isModalOpen : !this.state.isModalOpen };\r\n                        const index = this.props.items.findIndex(i => i.id === this.state.snoozeItem.id);\r\n                        console.log(\"snooze => \",event);\r\n                        //Default close snoozes for 1 min\r\n                        var snoozeSeconds = 60000 ;\r\n                            var items = [];\r\n                            //items = JSON.parse(window.localStorage.getItem(\"TripList\"));\r\n                            console.log(\"items => \", items);\r\n                            const nextReminderTime = new Date().getTime()+snoozeSeconds;\r\n                            const nextReminderDateTime = moment(nextReminderTime).format(\"YYYY-MM-DD[T]HH:mm\");\r\n    \r\n                            const newListGoto =  this.props.items.filter((item)=>{ \r\n                                if(item.id === this.state.snoozeItem.id) item.reminderTime = nextReminderDateTime; return item; \r\n                            });\r\n                            \r\n                            window.localStorage.setItem(\"TripList\", JSON.stringify(newListGoto));\r\n                            \r\n                            const tripListWithReminderGoto = newListGoto.filter((item) => {\r\n                                if(item.isReminderSet)\r\n                                  return {id: item.id, dateTime : item.reminderTime }\r\n                              });\r\n                              console.log(\"newListGoto => \", newListGoto);\r\n                              console.log(\"tripListWithReminder => \", tripListWithReminderGoto);\r\n                              this.props.onTripSelected(index, this.state.snoozeItem.id);\r\n\r\n                             //this.props.onTripSave(this.props.items, this.props.tripListWithReminder);\r\n                             this.setState({\r\n                                    ...newState\r\n                                });    \r\n                        break;\r\n                case \"snooze\":\r\n                   \r\n                    console.log(\"snooze => \",event);\r\n                    //Default close snoozes for 1 min\r\n                    var snoozeSeconds = 1000 ;\r\n                    if(!event)\r\n                        snoozeSeconds =60000;\r\n                    else\r\n                        snoozeSeconds = 60000* event*5;\r\n                        var items = [];\r\n                        //items = JSON.parse(window.localStorage.getItem(\"TripList\"));\r\n                        console.log(\"items => \", items);\r\n                        const reminderTime = new Date().getTime()+snoozeSeconds;\r\n                        const reminderDateTime = moment(reminderTime).format(\"YYYY-MM-DD[T]HH:mm\");\r\n\r\n                        const newList =  this.props.items.filter((item)=>{ \r\n                            if(item.id === this.state.snoozeItem.id) item.reminderTime = reminderDateTime; return item; \r\n                        });\r\n                        \r\n\r\n                        // newList.push({\r\n                        //     id: this.state.snoozeItem.id,\r\n                        //     title : this.state.snoozeItem.title,\r\n                        //     destination: this.state.snoozeItem.destination,\r\n                        //     category: this.state.snoozeItem.category,\r\n                        //     startDate: this.state.snoozeItem.startDate,\r\n                        //     endDate: this.state.snoozeItem.endDate,\r\n                        //     todos: this.state.snoozeItem.todos,\r\n                        //     isReminderSet: this.state.snoozeItem.isReminderSet,\r\n                        //     reminderTime: reminderDateTime,\r\n                        //     state: this.state.snoozeItem.state,\r\n                        //     duration: this.state.snoozeItem.duration\r\n                            \r\n                        // });\r\n                        window.localStorage.setItem(\"TripList\", JSON.stringify(newList));\r\n                        \r\n                        const tripListWithReminder = newList.filter((item) => {\r\n                            if(item.isReminderSet)\r\n                              return {id: item.id, dateTime : item.reminderTime }\r\n                          });\r\n                          console.log(\"newList => \", newList);\r\n                          console.log(\"tripListWithReminder => \", tripListWithReminder);\r\n\r\n                         this.props.onTripSave(this.props.items, this.props.tripListWithReminder);\r\n                         newState = {\r\n                            ...this.state, isModalOpen : !this.state.isModalOpen, snoozeItem:null};\r\n                            this.setState({\r\n                                ...newState\r\n                            });\r\n                        return;\r\n\r\n            }\r\n            this.setState({\r\n                ...newState\r\n            });\r\n        }\r\n\r\n       \r\n\r\n        const checkDoneStatus = (todos) => {\r\n            const doneList = todos.filter(todo=> todo.isDone);\r\n            //console.log(\"doneList => \",doneList.length);\r\n            if(todos.length === doneList.length)\r\n                return 2;\r\n            else if(doneList.length>0)\r\n                return 1;\r\n            else\r\n                return 0;\r\n        }\r\n\r\n        const itemStatus = [\"Created\", \"In Progress\", \"Ready\"]\r\n        const itemType = [\"\",\"Business\", \"Vacation\"]\r\n\r\n        return(\r\n                  <TableContainer component={Paper} style={{height:'100%'}}>\r\n                    <Table aria-label=\"simple table\" size=\"small\" style={{ width: \"auto\", tableLayout: \"auto\" }}>\r\n                        <TableHead style={{height:'100%', backgroundColor: '#3f51b5', color: 'white'}}>\r\n                        <TableRow  scope=\"row\">\r\n                        {headers.map((header, index)=>\r\n                            <TableCell key={index} align=\"right\" style={{color: 'white'}}>{header}</TableCell>\r\n                        )\r\n                        }\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {\r\n                            this.props.items.map((item, index)=>\r\n                            <TableRow key={index} \r\n                                        selected={index === this.props.selectedTrip}\r\n                                        onClick={(event) => handleChange(\"rowSelected\", event, index)}\r\n                                        scope=\"row\">\r\n                                <TableCell >\r\n                                    <Checkbox\r\n                                        checked={index === this.props.selectedTrip}\r\n                                        onChange={(event) => handleChange(\"rowSelected\", event, index)}\r\n                                    />\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">{item.title}</TableCell>\r\n                                <TableCell align=\"right\">{item.destination}</TableCell>\r\n                                <TableCell align=\"right\">{item.duration+(item.duration > 1? \" Days\": \" Day\" )}</TableCell>\r\n                                <TableCell align=\"right\">{itemType[item.category]}</TableCell>\r\n                                <TableCell align=\"right\">{item.isReminderSet?<NotificationsActiveIcon/>:<NotificationsOffIcon/>}</TableCell>\r\n                                <TableCell align=\"right\">{checkDoneStatus(item.todos) === 2 ?\"Done\":\"Yes\"}</TableCell>\r\n                                <TableCell align=\"right\">{itemStatus[checkDoneStatus(item.todos)]}</TableCell>\r\n                            </TableRow>\r\n                            )\r\n                        }\r\n                        </TableBody>\r\n                    </Table>\r\n                    {console.log(\"snoozeItem => \",this.state.snoozeItem)}\r\n                    <AlertDialog isOpen={this.state.isModalOpen} \r\n                                 onClose={(name, event) => handleChange(name, event)}\r\n                                 SnaoozeItem={this.state.snoozeItem}/>\r\n                    </TableContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst getFilteredList = (items, category, searchText) => {\r\n    console.log(\"getFilteredList items =>\",items );\r\n    console.log(\"getFilteredList category =>\",category );\r\n\r\n    if(!searchText){\r\n            switch (category) {\r\n            case 0:\r\n                return items\r\n            case 1:\r\n            case 2:\r\n                const filteredItem = items.filter(t => {return t.category === category});\r\n                console.log(\"items Filtered\", filteredItem);\r\n                return items.filter(t => {return t.category === category})\r\n            default:\r\n                return items;\r\n        }\r\n    }\r\n    else{\r\n        console.log(\"TExt chanegd => \",searchText);\r\n        const filteredItem = items.filter((item) => {\r\n            const Data = JSON.stringify(item.todos);\r\n            if(item.title.includes(searchText) || Data.includes(searchText) || item.destination.includes(searchText)){\r\n                return item;\r\n            }  \r\n        });\r\n\r\n        return filteredItem;\r\n    }\r\n    return items;\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    filterSelected: state.filterSelected,\r\n    selectedTrip: state.selectedTrip,\r\n    items: getFilteredList(state.items,state.filterSelected, state.searchText),\r\n    tripListWithReminder:state.tripListWithReminder\r\n  })\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    onTripSelected: (selectedTrip,id) => dispatch(TripSelected(selectedTrip,id)),\r\n    onTripSave: (newList, tripListWithReminder) => dispatch(SaveTrip(newList,tripListWithReminder)),\r\n  })\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(grid_list)\r\n","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport FormPanel from '../DetailsForm/form'\nimport FilterPanel from '../FilterMenu/filter'\nimport ListPanel from '../TripList/grid_list'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  //localStorage.setItem('myData', \"Test Jak Data\");\n\n  return (\n    <div className={classes.root} style={{margin:'20px'}}>\n      <Grid container spacing={3}>\n        <Grid item xs={2}>\n            <FilterPanel/>\n        </Grid>\n        <Grid item xs={5}>\n            <ListPanel></ListPanel>\n        </Grid>\n        <Grid item xs={5}>\n          <Paper className={classes.paper}>\n            <FormPanel/>\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport {\r\n    FILTERCATEGORY,\r\n    SELECTEDTRIP,\r\n    SEARCHTEXT,\r\n    ADDNEWTRIP,\r\n    TRIPDB,\r\n    TRIPLIST,\r\n    SAVETRIPCANCEL,\r\n    SAVETRIP,\r\n    DELETETRIP\r\n  } from '../constants/ActionTypes'\r\nconst initialState = {addedIds:[],filterSelected : 0, items:[]};\r\n\r\n\r\nconst Trips = (state = initialState, action) => {\r\n    console.log(\"CALLED TYPE => \", action.type);\r\n    switch (action.type){\r\n        /**\r\n        * Reducer to handle Filter by category \r\n        */\r\n        case FILTERCATEGORY:\r\n            return {...state, filterSelected: action.category, selectedTrip : -1, selectedTripId : -1};\r\n        /**\r\n        * Reducer to handle Search operation in the Trip List\r\n        */\r\n        case SEARCHTEXT:\r\n            return {...state, searchText : action.text};    \r\n        /**\r\n        * Reducer to handle Selection operation in the Trip List\r\n        */    \r\n        case SELECTEDTRIP:\r\n            console.log(\"SELECTEDTRIP triggered => \", action.selectedTrip);\r\n            console.log(\"SELECTEDTRIP state => \", state);\r\n            console.log(\"SELECTEDTRIP idSelected => \", action);\r\n            if(action.selectedTrip === -1)\r\n            return {...state, selectedTrip: action.selectedTrip, selectedTripId :null };\r\n            else\r\n            return {...state, selectedTrip: action.selectedTrip, selectedTripId :action.id};\r\n        /**\r\n        * Reducer to handle the Trip List\r\n        */\r\n        case TRIPLIST:\r\n            console.log(\"action.tripList delete => \", action.tripList)\r\n            return {...state, items: action.tripList,selectedTrip : -1, item: null, selectedTripId :-1, tripListWithReminder:action.tripListWithReminder};\r\n         /**\r\n        * Reducer to handle the Save and delete \r\n        */\r\n        case SAVETRIP:\r\n        case DELETETRIP:\r\n            console.log(\"action.tripList delete => \", action.tripList)\r\n            console.log(\"tripListWithReminder => \", action.tripListWithReminder)\r\n\r\n            return {...state, items: action.tripList,selectedTrip : -1, item: null, selectedTripId :-1, tripListWithReminder:action.tripListWithReminder};\r\n        /**\r\n        * Reducer to handle the Save Cancel and Add new Trip Button in the Filter panel\r\n        */\r\n        case SAVETRIPCANCEL:\r\n        case ADDNEWTRIP:\r\n            return {...state , selectedTrip : -1, selectedTripId : -1}\r\n        default:\r\n            return state;\r\n        return state;\r\n    }\r\n  }\r\n\r\nexport default Trips;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers'\nimport {getAllTrips} from '../src/actions/action'\nimport thunk from 'redux-thunk'\n\n/**\n * We are using Redux Thunk in this project\n */\nconst middleware = [ thunk ];\n\nconst store = createStore(rootReducer,applyMiddleware(...middleware))\n\nstore.dispatch(getAllTrips())\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}